#!/usr/bin/env python

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import numpy as np

class PoleFollower:
    def __init__(self):
        rospy.loginfo('Pole Follower node initialized!')
        self.k_rho = 1
        self.k_alpha = 5

        self.r = 0.05
        self.test_angle = 15
        self.dif = 0.3

        self.pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)


    def pole_detect(self):
        scan = rospy.wait_for_message('/scan', LaserScan)
        ranges = np.array(scan.ranges)
        ranges[ranges < 0.1] = 5000.0
        ranges = ranges.tolist()

        return self.find_cylinder(ranges)


    def find_cylinder(self, ranges):

        # TODO: !!! 
        # rho = min(ranges)
        # alpha = ranges.index(min_range)
        cylinders = []
        cylinders_index = []

        for i in range(1, 360):
            test_d = ranges[i]
            # angle = self.test_angle / 180 * np.pi
            # near_d = test_d + self.dif
            # near_d = (test_d + self.r) * np.cos(angle) - \
            #     np.sqrt(((test_d + self.r) * np.cos(angle))**2 - (test_d**2 + 2*test_d*self.r))
            # rospy.loginfo("Current d: %f, near_d: %f", test_d, near_d)
            # if (np.abs(ranges[np.mod(i + 360 - self.test_angle, 360)] - near_d) <= 0.5) \
            #     & (np.abs(ranges[np.mod(i + self.test_angle, 360)] - near_d) <= 0.5): 
            #     cylinders.append(ranges[i])
            #     cylinders_index.append(i)

            if (ranges[np.mod(i + 360 - self.test_angle, 360)] - test_d >= 0.3) \
                & (ranges[np.mod(i + self.test_angle, 360)] - test_d >= 0.3): 
                cylinders.append(ranges[i])
                cylinders_index.append(i)

        if cylinders == ['empty']:
            rospy.loginfo("No cylinder!")
            return 0, 0
        
        else:
            rho = min(cylinders)
            alpha = cylinders_index[cylinders.index(rho)]
            if alpha > 180:
                alpha = (alpha - 360) / 180 * np.pi
            else:
                alpha = alpha / 180 * np.pi

            return rho, alpha
    
    
    def move(self):
        while not rospy.is_shutdown():
            rho, alpha = self.pole_detect()

            if rho <= 0.25:
                self.stop()
                continue

            v = min(self.k_rho * rho, 0.2)
            omega = min(self.k_alpha * alpha, 2)

            twist = Twist()
            twist.linear.x = v
            twist.angular.z = omega

            self.pub.publish(twist)

    def stop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.angular.z = 0
        self.pub.publish(twist)

def main():
    rospy.init_node('pole_follower', anonymous=True)
    try:
        pole_follower = PoleFollower()
        pole_follower.move()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
